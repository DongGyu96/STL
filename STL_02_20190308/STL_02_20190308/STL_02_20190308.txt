

==================
Fri Mar  8 14:02:07 2019

==================
#include <iostream>
#include <string>
#include <fstream>
#include <algorithm>
#include <iterator>
#include <chrono>

void save(std::string);

int main()
{
	save("main.cpp");
}

void save(std::string fname)
{
	// fname을 읽기 모드로 연다
	std::ifstream in(fname);
	if (!in) // 이름이 잘못됬을 경우
	{
		return;
	}

	// 기록할 파일을 덧붙여쓰기 모드로 연다
	std::ofstream out("STL_02_20190308.txt", std::ios::app);


	// 실행된 시간을 기록한다
	// 시간기원에서 몇tic이 흘렀나?
	auto tic = std::chrono::system_clock::now();

	// 이 값을 time_t로 변환
	auto time = std::chrono::system_clock::to_time_t(tic);

	// 이 값을 글자로 변환
	std::string date = ctime(&time);

	out << std::endl << std::endl;
	out << "==================" << std::endl;
	out << date << std::endl;
	out << "==================" << std::endl;


	// fname의 모든 내용을 덧붙여 쓴다
	std::copy(std::istreambuf_iterator<char>(in),
		std::istreambuf_iterator<char>(),
		std::ostreambuf_iterator<char>(out));//copy(어디부터, 어디까지, 어디로)

}


==================
Fri Mar  8 14:02:08 2019

==================
#include <iostream>
#include <string>
#include <fstream>
#include <algorithm>
#include <iterator>
#include <chrono>

void save(std::string);

int main()
{
	save("main.cpp");
}

void save(std::string fname)
{
	// fname을 읽기 모드로 연다
	std::ifstream in(fname);
	if (!in) // 이름이 잘못됬을 경우
	{
		return;
	}

	// 기록할 파일을 덧붙여쓰기 모드로 연다
	std::ofstream out("STL_02_20190308.txt", std::ios::app);


	// 실행된 시간을 기록한다
	// 시간기원에서 몇tic이 흘렀나?
	auto tic = std::chrono::system_clock::now();

	// 이 값을 time_t로 변환
	auto time = std::chrono::system_clock::to_time_t(tic);

	// 이 값을 글자로 변환
	std::string date = ctime(&time);

	out << std::endl << std::endl;
	out << "==================" << std::endl;
	out << date << std::endl;
	out << "==================" << std::endl;


	// fname의 모든 내용을 덧붙여 쓴다
	std::copy(std::istreambuf_iterator<char>(in),
		std::istreambuf_iterator<char>(),
		std::ostreambuf_iterator<char>(out));//copy(어디부터, 어디까지, 어디로)

}


==================
Fri Mar  8 14:02:10 2019

==================
#include <iostream>
#include <string>
#include <fstream>
#include <algorithm>
#include <iterator>
#include <chrono>

void save(std::string);

int main()
{
	save("main.cpp");
}

void save(std::string fname)
{
	// fname을 읽기 모드로 연다
	std::ifstream in(fname);
	if (!in) // 이름이 잘못됬을 경우
	{
		return;
	}

	// 기록할 파일을 덧붙여쓰기 모드로 연다
	std::ofstream out("STL_02_20190308.txt", std::ios::app);


	// 실행된 시간을 기록한다
	// 시간기원에서 몇tic이 흘렀나?
	auto tic = std::chrono::system_clock::now();

	// 이 값을 time_t로 변환
	auto time = std::chrono::system_clock::to_time_t(tic);

	// 이 값을 글자로 변환
	std::string date = ctime(&time);

	out << std::endl << std::endl;
	out << "==================" << std::endl;
	out << date << std::endl;
	out << "==================" << std::endl;


	// fname의 모든 내용을 덧붙여 쓴다
	std::copy(std::istreambuf_iterator<char>(in),
		std::istreambuf_iterator<char>(),
		std::ostreambuf_iterator<char>(out));//copy(어디부터, 어디까지, 어디로)

}


==================
Fri Mar  8 14:04:16 2019

==================
#include <iostream>
#include "save.h"

int main()
{
	save("main.cpp");
}

//
//#include <string>
//#include <fstream>
//#include <algorithm>
//#include <iterator>
//#include <chrono>
//void save(std::string fname)
//{
//	// fname을 읽기 모드로 연다
//	std::ifstream in(fname);
//	if (!in) // 이름이 잘못됬을 경우
//	{
//		return;
//	}
//
//	// 기록할 파일을 덧붙여쓰기 모드로 연다
//	std::ofstream out("STL_02_20190308.txt", std::ios::app);
//
//
//	// 실행된 시간을 기록한다
//	// 시간기원에서 몇tic이 흘렀나?
//	auto tic = std::chrono::system_clock::now();
//
//	// 이 값을 time_t로 변환
//	auto time = std::chrono::system_clock::to_time_t(tic);
//
//	// 이 값을 글자로 변환
//	std::string date = ctime(&time);
//
//	out << std::endl << std::endl;
//	out << "==================" << std::endl;
//	out << date << std::endl;
//	out << "==================" << std::endl;
//
//
//	// fname의 모든 내용을 덧붙여 쓴다
//	std::copy(std::istreambuf_iterator<char>(in),
//		std::istreambuf_iterator<char>(),
//		std::ostreambuf_iterator<char>(out));//copy(어디부터, 어디까지, 어디로)
//
//}


==================
Fri Mar  8 14:07:24 2019

==================
#include <iostream>
#include "save.h"

int main()
{
	save("main.cpp");
}


==================
Fri Mar  8 14:24:04 2019
==================
#include <iostream>
#include "save.h"

int main()
{
	save("main.cpp");
}


==================
Fri Mar  8 14:41:44 2019
==================
#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

int main()
{
	// 정수 10개를 정렬해보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	sort(begin(a), end(a));
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}


==================
Fri Mar  8 14:48:31 2019
==================
#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

int main()
{
	// 정수 10개를 정렬해보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	sort(begin(a) + 2, end(a) - 3);
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}


==================
Fri Mar  8 14:58:30 2019
==================
#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

bool how(int, int);

int main()
{
	// 정수 10개를 정렬해보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	//ascending order : 오름차순 / descending order : 내림차순 정렬
	sort(begin(a), end(a), how);//디폴트는 오름차순
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}

bool how(int a, int b)
{
	return a < b;
}

==================
Fri Mar  8 14:58:36 2019
==================
#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

bool how(int, int);

int main()
{
	// 정수 10개를 정렬해보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	//ascending order : 오름차순 / descending order : 내림차순 정렬
	sort(begin(a), end(a), how);//디폴트는 오름차순
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}

bool how(int a, int b)
{
	return a > b;
}

==================
Fri Mar  8 14:58:53 2019
==================
#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

bool how(int, int);

int main()
{
	// 정수 10개를 정렬해보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	//ascending order : 오름차순 / descending order : 내림차순 정렬
	sort(begin(a), end(a), 0);//디폴트는 오름차순
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}

bool how(int a, int b)
{
	return a > b;
}

==================
Fri Mar  8 14:58:59 2019
==================
#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

bool how(int, int);

int main()
{
	// 정수 10개를 정렬해보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	//ascending order : 오름차순 / descending order : 내림차순 정렬
	sort(begin(a), end(a), how);//디폴트는 오름차순
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}

bool how(int a, int b)
{
	return a > b;
}

==================
Fri Mar  8 15:01:47 2019
==================
#include <iostream>
#include <algorithm>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

bool how(int, int);

int main()
{
	// 정수 10개를 정렬해보자
	int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	//ascending order : 오름차순 / descending order : 내림차순 정렬
	sort(begin(a), end(a), how);//디폴트는 오름차순
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}

bool how(int a, int b)
{
	static int count = 0;
	cout << count++ << endl;
	return a > b;
}


==================
Fri Mar  8 15:12:46 2019
==================
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

//bool how(int a, int b)
//{
//	static int count = 0;
//	return a > b;
//}

int main()
{
	// 정수 10개를 정렬해보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	//정수 1000개를 정렬해보자
	int a[1000];
	default_random_engine dre;
	uniform_int_distribution<> uid;
	for (int i = 0; i < 1000; ++i)
	{
				//분포(엔진) pseudo랜덤(인위적인랜덤)
		a[i] = uid(dre);
	}

	//ascending order : 오름차순 / descending order : 내림차순 정렬
	sort(begin(a), end(a), [](int a, int b) { return a > b; });//디폴트는 오름차순
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}

==================
Fri Mar  8 15:13:12 2019
==================
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

//bool how(int a, int b)
//{
//	static int count = 0;
//	return a > b;
//}

int main()
{
	// 정수 10개를 정렬해보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	//정수 1000개를 정렬해보자
	int a[1000];
	default_random_engine dre;
	uniform_int_distribution<> uid;
	for (int i = 0; i < 1000; ++i)
	{
				//분포(엔진) pseudo랜덤(인위적인랜덤)
		a[i] = uid(dre);
	}

	//ascending order : 오름차순 / descending order : 내림차순 정렬
	sort(begin(a), end(a), [](int a, int b) { return a > b; });//디폴트는 오름차순
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}

==================
Fri Mar  8 15:13:37 2019
==================
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

//bool how(int a, int b)
//{
//	static int count = 0;
//	return a > b;
//}

int main()
{
	// 정수 10개를 정렬해보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	//정수 1000개를 정렬해보자
	int a[1000];
	default_random_engine dre;
	uniform_int_distribution<> uid(0, 1000);
	for (int i = 0; i < 1000; ++i)
	{
				//분포(엔진) pseudo랜덤(인위적인랜덤)
		a[i] = uid(dre);
	}

	//ascending order : 오름차순 / descending order : 내림차순 정렬
	sort(begin(a), end(a), [](int a, int b) { return a > b; });//디폴트는 오름차순
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}

==================
Fri Mar  8 15:14:44 2019
==================
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
using namespace std; // namespace는 대규모 프로그래밍을 가정하고 사용하는것

//bool how(int a, int b)
//{
//	static int count = 0;
//	return a > b;
//}

int main()
{
	// 정수 10개를 정렬해보자
	//int a[] {1, 3, 5, 7, 9, 2, 4, 6, 8, 10}; // 초기화자 목록 Initialization List
	//Uniform Initialization

	//정수 1000개를 정렬해보자
	int a[1000];
	default_random_engine dre;
	uniform_int_distribution<> uid(0, 1000);
	for (int i = 0; i < 1000; ++i)
	{
				//분포(엔진) pseudo랜덤(인위적인랜덤)
		a[i] = uid(dre);
	}

	//ascending order : 오름차순 / descending order : 내림차순 정렬
	sort(begin(a), end(a), [](int a, int b) { return a < b; });//디폴트는 오름차순
	
	for (int d : a)
		cout << d << " ";
	cout << endl;

	save("main.cpp");
}