

==================
Fri Mar 15 13:38:41 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char p[]) { strcpy_s(name, p); }
	int GetAge() { return age; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(0, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		cout << a[i].GetAge() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:41:29 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char p[])
	{ 
		strcpy_s(name, p);
		name[10] = NULL;
	}
	int GetAge() { return age; }
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(0, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		for (int j = 0; j < 10; ++j)
		{
			char name[10];
			name[j] = uid(dre) + 97;
		}
		cout << a[i].GetName() << "나이 : " << a[i].GetAge() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:41:54 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char p[])
	{ 
		strcpy_s(name, p);
		name[10] = NULL;
	}
	int GetAge() { return age; }
	char GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(0, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		for (int j = 0; j < 10; ++j)
		{
			char name[10];
			name[j] = uid(dre) + 97;
		}
		cout << a[i].GetName() << "나이 : " << a[i].GetAge() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:42:06 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char p[])
	{ 
		strcpy_s(name, p);
		name[10] = NULL;
	}
	int GetAge() { return age; }
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(0, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		for (int j = 0; j < 10; ++j)
		{
			char name[10];
			name[j] = uid(dre) + 97;
		}
		cout << &a[i].GetName() << "나이 : " << a[i].GetAge() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:43:32 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char *p)
	{ 
		strcpy_s(name, p);
		name[10] = NULL;
	}
	int GetAge() { return age; }
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(0, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		char name[10]{ 0 };
		for (int j = 0; j < 10; ++j)
		{
			name[j] = uid(dre) + 97;
			cout << name[j];
		}
		//a[i].SetName(name);
		cout << a[i].GetName() << "나이 : " << a[i].GetAge() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:45:23 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char n, int count)
	{ 
		name[count] = n;
	}
	int GetAge() { return age; }
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(0, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		for (int j = 0; j < 10; ++j)
		{
			a[i].SetName(char(uid(dre) + 97), j);
		}
		cout << a[i].GetName() << "나이 : " << a[i].GetAge() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:45:37 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char n, int count)
	{ 
		name[count] = n;
	}
	int GetAge() { return age; }
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(0, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		for (int j = 0; j < 10; ++j)
		{
			a[i].SetName(char(uid(dre) + 97), j);
		}
		a[i].SetName(NULL, 10);
		cout << a[i].GetName() << "나이 : " << a[i].GetAge() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:45:51 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char n, int count)
	{ 
		name[count] = n;
	}
	int GetAge() { return age; }
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(0, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		for (int j = 0; j < 10; ++j)
		{
			a[i].SetName(char(uid(dre) + 97), j);
		}
		a[i].SetName(NULL, 10);
		cout << "이름 : " << a[i].GetName() << "   나이 : " << a[i].GetAge() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:46:07 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char n, int count)
	{ 
		name[count] = n;
	}
	int GetAge() { return age; }
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		for (int j = 0; j < 10; ++j)
		{
			a[i].SetName(char(uid(dre) + 97), j);
		}
		a[i].SetName(NULL, 10);
		cout << "이름 : " << a[i].GetName() << "   나이 : " << a[i].GetAge() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:47:22 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char n, int count)
	{ 
		name[count] = n;
	}
	int GetAge() { return age; }
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		for (int j = 0; j < 10; ++j)
		{
			a[i].SetName(char(uid(dre) + 97), j);
		}
		a[i].SetName(NULL, 10);
		cout << "이름 : " << a[i].GetName() << "   나이 : " << a[i].GetAge() << endl;
	}
	ofstream out("이름오름차순 정렬.dat", ios::binary);

	out.write((Dog *)a, 1000 * sizeof(Dog));

	save("main.cpp");
}

==================
Fri Mar 15 13:48:39 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char n, int count)
	{ 
		name[count] = n;
	}
	int GetAge() { return age; }
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		for (int j = 0; j < 10; ++j)
		{
			a[i].SetName(char(uid(dre) + 97), j);
		}
		a[i].SetName(NULL, 10);
		cout << "이름 : " << a[i].GetName() << "   나이 : " << a[i].GetAge() << endl;
	}
	ofstream out("이름오름차순 정렬.dat", ios::binary);

	for (int i = 0; i < 1000; ++i)
	{
		out.write((char*)a[i].GetName(), a[i].GetAge(), sizeof(Dog));
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:48:51 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	void SetAge(int num) { age = num; }
	void SetName(char n, int count)
	{ 
		name[count] = n;
	}
	int GetAge() { return age; }
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 21);

	for (int i = 0; i < 1000; ++i)
	{
		a[i].SetAge(uid(dre));
		for (int j = 0; j < 10; ++j)
		{
			a[i].SetName(char(uid(dre) + 97), j);
		}
		a[i].SetName(NULL, 10);
		cout << "이름 : " << a[i].GetName() << "   나이 : " << a[i].GetAge() << endl;
	}
	ofstream out("이름오름차순 정렬.dat", ios::binary);

	for (int i = 0; i < 1000; ++i)
	{
		out.write((char*)a[i].GetName(), sizeof(Dog));
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:54:17 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z' + 1);

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](Dog a, Dog b) {
		return a.GetName < a.GetName;
	});

	ofstream out("이름오름차순 정렬.dat", ios::binary);

	for (int i = 0; i < 1000; ++i)
	{
		out.write((char*)a[i].GetName, sizeof(Dog));
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:54:32 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z' + 1);

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](Dog a, Dog b) {
		return a.GetName() < a.GetName();
	});

	ofstream out("이름오름차순 정렬.dat", ios::binary);

	for (int i = 0; i < 1000; ++i)
	{
		out.write((char*)a[i].GetName(), sizeof(Dog));
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:54:48 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z' + 1);

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	char* GetName() { return name; }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](Dog a, Dog b) {
		return a.GetName() < a.GetName();
	});

	ofstream out("이름오름차순 정렬.dat", ios::binary);

	for (int i = 0; i < 1000; ++i)
	{
		out.write((char*)a[i].GetName(), sizeof(Dog));
		cout << a[i].GetName() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:56:54 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z' + 1);

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	string GetName() { return string(name); }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](Dog a, Dog b) {
		return a.GetName() < b.GetName();
	});

	ofstream out("이름오름차순 정렬.dat", ios::binary);

	for (int i = 0; i < 1000; ++i)
	{
		out.write(a[i].GetName(), sizeof(Dog));
		cout << a[i].GetName() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:57:02 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z' + 1);

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	string GetName() { return string(name); }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](Dog a, Dog b) {
		return a.GetName() < b.GetName();
	});

	ofstream out("이름오름차순 정렬.dat", ios::binary);

	for (int i = 0; i < 1000; ++i)
	{
		out.write(a[i].GetName(), sizeof(Dog));
		cout << a[i].GetName() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 13:57:09 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z' + 1);

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	string GetName() { return string(name); }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](Dog a, Dog b) {
		return a.GetName() < b.GetName();
	});

	ofstream out("이름오름차순 정렬.dat", ios::binary);

	for (int i = 0; i < 1000; ++i)
	{
		//out.write(a[i].GetName(), sizeof(Dog));
		cout << a[i].GetName() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 14:01:56 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z' + 1);

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
	string GetName() const { return string(name); }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});

	ofstream out("이름오름차순 정렬.dat", ios::binary);
	sizeof(Dog);

	for (int i = 0; i < 1000; ++i)
	{
		//out.write(a[i].GetName(), sizeof(Dog));
		cout << a[i].GetName() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 14:02:04 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z' + 1);

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
	string GetName() const { return string(name); }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});

	ofstream out("이름오름차순 정렬.dat", ios::binary);
	cout << sizeof(Dog);

	for (int i = 0; i < 1000; ++i)
	{
		//out.write(a[i].GetName(), sizeof(Dog));
		cout << a[i].GetName() << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 14:03:34 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z' + 1);

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
	string GetName() const { return string(name); }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});

	ofstream out("이름오름차순 정렬.dat", ios::binary);

	for (int i = 0; i < 1000; ++i)
	{
		//out.write(a[i].GetName(), sizeof(Dog));
		cout << a[i].GetName() << endl;
	}
	cout << sizeof(char) << endl;
	save("main.cpp");
}

==================
Fri Mar 15 14:06:31 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z' + 1);

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
	string GetName() const { return string(name); }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});

	ofstream out("Dog이름순정렬.dat", ios::binary);

	out.write((char*)a, sizeof(Dog) * 1000);
	save("main.cpp");
}

==================
Fri Mar 15 14:07:32 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution<> uid(0, 21);
uniform_int_distribution<> uidName('a', 'z');

class Dog {
	char name[11];	// 이름은 임의의 소문자 10글자로 구성
	int age;		// 0~20 사이의 값을 갖는다
public:
	Dog() {
		for (int i = 0; i < 10; ++i)
		{
			name[i] = uidName(dre);
		}
		name[10] = '\0';
		age = uid(dre);
	}
	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
	string GetName() const { return string(name); }
};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

int main()
{
	Dog a[1000];

	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});

	ofstream out("Dog이름순정렬.dat", ios::binary);

	out.write((char*)a, sizeof(Dog) * 1000);
	save("main.cpp");
}

==================
Fri Mar 15 14:11:21 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 21);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력한다.
char dog[16];

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	ifstream in("Dog이름순정렬.dat", ios::binary);
	in.read(dog, 16);
	cout << dog << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:11:55 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 21);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력한다.
char dog[16];

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 14:19:33 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 21);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
class Dog {
	char name[11];
	int age;

	friend ostream& operator<<(ostream&, const Dog&);
};

// char dog[16];
ostream& operator<<(ostream& os, const Dog& dog)
{
	cout << "이름 : " << dog.name << ", 나이 : " << dog.age;
}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	ifstream in("Dog이름순정렬.dat", ios::binary);

	Dog dog;

	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 14:19:50 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 21);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
class Dog {
	char name[11];
	int age;

	friend ostream& operator<<(ostream&, const Dog&);
};

// char dog[16];
ostream& operator<<(ostream& os, const Dog& dog)
{
	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
	return os;
}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	ifstream in("Dog이름순정렬.dat", ios::binary);

	Dog dog;

	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 14:20:03 2019

==================
// 프로그램 시간을 재는 코드
// callable code
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 21);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
class Dog {
	char name[11];
	int age;

	friend ostream& operator<<(ostream&, const Dog&);
};

// char dog[16];
ostream& operator<<(ostream& os, const Dog& dog)
{
	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
	return os;
}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	ifstream in("Dog이름순정렬.dat", ios::binary);

	Dog dog;

	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 15 14:35:15 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	// 시간이 걸리는 코드
	for (int i = 0; i < 10000; ++i)
		for (int j = 0; j < 10000; ++j)
			;

	// 다시 시간을 잰다
	// 차이를 계산한다


	save("main.cpp");
}

==================
Fri Mar 15 14:35:36 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	// 시간이 걸리는 코드
	for (int i = 0; i < 100000; ++i)
		for (int j = 0; j < 100000; ++j)
			;

	// 다시 시간을 잰다
	// 차이를 계산한다


	save("main.cpp");
}

==================
Fri Mar 15 14:38:23 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);

	// 다시 시간을 잰다
	// 차이를 계산한다


	save("main.cpp");
}

==================
Fri Mar 15 14:38:49 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	// 시간이 걸리는 코드
	this_thread::sleep_for(10s);

	// 다시 시간을 잰다
	// 차이를 계산한다


	save("main.cpp");
}

==================
Fri Mar 15 14:45:56 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = b - e;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:46:10 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = b - e;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:46:17 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:46:35 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:46:37 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:46:38 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:46:40 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:46:47 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:46:49 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:46:51 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:46:52 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:47:10 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(2s);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:47:21 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:47:23 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:47:29 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ps);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:47:33 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ns);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:47:37 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ns);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:47:39 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ns);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:47:44 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:48:43 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	chrono::duration_cast<chrono::milliseconds>(d);
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:48:45 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	chrono::duration_cast<chrono::milliseconds>(d);
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:48:49 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	chrono::duration_cast<chrono::milliseconds>(d);
	cout << d.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:49:04 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	auto t = chrono::duration_cast<chrono::milliseconds>(d);
	cout << t.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:49:06 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	auto t = chrono::duration_cast<chrono::milliseconds>(d);
	cout << t.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:49:08 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(123ms);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	auto t = chrono::duration_cast<chrono::milliseconds>(d);
	cout << t.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:49:29 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	auto t = chrono::duration_cast<chrono::milliseconds>(d); // ms단위로 변환
	cout << t.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:49:42 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(1ns);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	auto t = chrono::duration_cast<chrono::nanoseconds>(d); // ms단위로 변환
	cout << t.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:49:47 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(100ns);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	auto t = chrono::duration_cast<chrono::nanoseconds>(d); // ms단위로 변환
	cout << t.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:49:59 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	auto t = chrono::duration_cast<chrono::milliseconds>(d); // ms단위로 변환
	cout << t.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:50:15 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(10s);
	// 다시 시간을 잰다
	auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	auto d = e - b;
	auto t = chrono::duration_cast<chrono::milliseconds>(d); // ms단위로 변환
	cout << t.count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:53:20 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	cout << chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b).count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:53:26 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	cout << chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b).count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:53:30 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	cout << chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b).count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:54:04 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	using namespace std::chrono;
	// 시간을 잰다
	auto b = steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;

	save("main.cpp");
}

==================
Fri Mar 15 14:55:17 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

int main()
{
	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	using namespace std::chrono;
	// 시간을 잰다
	auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;

	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:08:27 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }

int main()
{
	auto f = jump;
	cout << typeid(f).name() << endl;

	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:10:26 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }

int main()
{
	void(*f)(void) = jump; // == auto f = jump;
	cout << typeid(f).name() << endl;

	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:12:01 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }

int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f)(void) = jump; // == auto f = jump;
	f();
	cout << "일반함수 : " << typeid(f).name() << endl;

	// 2. 람다
	[]() {cout << "람다 함수 실행" << endl; };

	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:12:09 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }

int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f)(void) = jump; // == auto f = jump;
	f();
	cout << "일반함수 : " << typeid(f).name() << endl;

	// 2. 람다
	[]() {cout << "람다 함수 실행" << endl; };

	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:13:02 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }

int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f1)(void) = jump; // == auto f1 = jump;
	f1();
	cout << "일반함수 : " << typeid(f1).name() << endl;

	// 2. 람다
	auto f2 = []() {cout << "람다 함수 실행" << endl; };
	cout << typeid(f2).name() << endl;

	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:13:18 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }

int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f1)(void) = jump; // == auto f1 = jump;
	f1();
	cout << "일반함수 : " << typeid(f1).name() << endl;

	// 2. 람다
	auto f2 = []() {cout << "람다 함수 실행" << endl; };
	f2();
	cout << typeid(f2).name() << endl;

	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:13:41 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }

int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f1)(void) = jump; // == auto f1 = jump;
	f1();
	cout << "일반함수 : " << typeid(f1).name() << endl;

	// 2. 람다
	auto f2 = []() {cout << "람다 함수 실행" << endl; };
	f2();
	cout << "람다 : " << typeid(f2).name() << endl;

	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:13:58 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }

int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f1)(void) = jump; // == auto f1 = jump;
	f1();
	cout << "일반함수 : " << typeid(f1).name() << endl << endl;

	// 2. 람다
	auto f2 = []() {cout << "람다 함수 실행" << endl; };
	f2();
	cout << "람다 : " << typeid(f2).name() << endl << endl;

	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:15:00 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }

int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f1)(void) = jump; // == auto f1 = jump;
	f1();
	cout << "일반함수 : " << typeid(f1).name() << endl << endl;

	// 2. 람다
	auto f2 = []() {cout << "람다 함수 실행" << endl; };
	f2();
	cout << "람다 : " << typeid(f2).name() << endl << endl;

	auto f4 = int(13);
	cout << typeid(f4).name() << endl;

	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:15:06 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }

int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f1)(void) = jump; // == auto f1 = jump;
	f1();
	cout << "일반함수 : " << typeid(f1).name() << endl << endl;

	// 2. 람다
	auto f2 = []() {cout << "람다 함수 실행" << endl; };
	f2();
	cout << "람다 : " << typeid(f2).name() << endl << endl;

	auto f4 = 13;
	cout << typeid(f4).name() << endl;

	/*Dog a[1000];
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:17:57 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }
class Dog {
public:
	int operator()(int a) { return a * a; }
};
int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f1)(void) = jump; // == auto f1 = jump;
	f1();
	cout << "일반함수 : " << typeid(f1).name() << endl << endl;

	// 2. 람다
	auto f2 = []() {cout << "람다 함수 실행" << endl; };
	f2();
	cout << "람다 : " << typeid(f2).name() << endl << endl;

	// 3. 함수객체 - ()연산자를 overloading한 클래스의 객체
	Dog dog;
	cout << dog(3) << end;

	/*Dog a[1000]; // 데이터 입력
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary); // 데이터 출력
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:18:01 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }
class Dog {
public:
	int operator()(int a) { return a * a; }
};
int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f1)(void) = jump; // == auto f1 = jump;
	f1();
	cout << "일반함수 : " << typeid(f1).name() << endl << endl;

	// 2. 람다
	auto f2 = []() {cout << "람다 함수 실행" << endl; };
	f2();
	cout << "람다 : " << typeid(f2).name() << endl << endl;

	// 3. 함수객체 - ()연산자를 overloading한 클래스의 객체
	Dog dog;
	cout << dog(3) << endl;

	/*Dog a[1000]; // 데이터 입력
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary); // 데이터 출력
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/

==================
Fri Mar 15 15:18:54 2019

==================
// 프로그램 시간을 재는 코드
// callable type을 표현하기 위한 functional class
// smart pointer
// 자원을 확보하는 클래스 만들어 놓기
#include <iostream>
#include <random>
#include <fstream>
#include <thread>
#include <chrono>
#include <string>
#include "save.h"
using namespace std;

//default_random_engine dre;
//uniform_int_distribution<> uid(0, 20);
//uniform_int_distribution<> uidName('a', 'z');

//class Dog {
//	char name[11];	// 이름은 임의의 소문자 10글자로 구성
//	int age;		// 0~20 사이의 값을 갖는다
//public:
//	Dog() {
//		for (int i = 0; i < 10; ++i)
//		{
//			name[i] = uidName(dre);
//		}
//		name[10] = '\0';
//		age = uid(dre);
//	}
//	// const함수는 멤버변수를 변경할수없지만 mutable int같이 선언하면 변경이 가능해짐
//	string GetName() const { return string(name); }
//};

// Dog 1000마리를 생성하자
// 이름과 나이를 설정한다
// 이름 오름차순으로 정렬한다
// 파일 "Dog이름순정렬.dat"
// 파일의 크기가 sizeof(Dog) * 1000;

// "Dog이름순정렬.dat"을 읽어 화면에 출력하라.
// class Dog 1000개의 정보가 binary모드로 기록되어 있다.
// 이름 : abcdasdfvb, 나이 : 3살
//class Dog {
//	char name[11];
//	int age;
//
//	friend ostream& operator<<(ostream&, const Dog&);
//};
// char dog[16];
//ostream& operator<<(ostream& os, const Dog& dog)
//{
//	cout << "이름 : " << dog.name << ", 나이 : " << dog.age << "살";
//	return os;
//}

// 호출가능타입 - callable type
// type - 변수를 부를수잇는것 (int void 등등)
void jump() { cout << "JUMP" << endl; }
void slide() { cout << "SLIDE" << endl; }
class Dog {
public:
	int operator()(int a) { return a * a; }
};
int main()
{
	// 호출가능타입정리
	// 1. 일반함수
	void(*f1)(void) = jump; // auto f1 = jump;
	f1();
	cout << "일반함수 : " << typeid(f1).name() << endl << endl;

	// 2. 람다
	auto f2 = []() {cout << "람다 함수 실행" << endl; };
	f2();
	cout << "람다 : " << typeid(f2).name() << endl << endl;

	// 3. 함수객체 - ()연산자를 overloading한 클래스의 객체
	Dog dog;
	auto f3 = dog;
	cout << f3(3) << endl;
	cout << "함수객체 : " << typeid(f3).name() << endl << endl;

	/*Dog a[1000]; // 데이터 입력
	sort(begin(a), end(a), [](const Dog& a, const Dog& b) {
		return a.GetName() < b.GetName();
	});
	ofstream out("Dog이름순정렬.dat", ios::binary);
	out.write((char*)a, sizeof(Dog) * 1000);*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary);
	for (int i = 0; i < 1000; ++i)
	{
		in.read(dog, 16);
		cout << dog << endl;
	}*/

	/*ifstream in("Dog이름순정렬.dat", ios::binary); // 데이터 출력
	Dog dog;
	for (int i = 0; i < 1000; ++i)
	{
		in.read((char *)&dog, sizeof(Dog));
		cout << dog << endl;
	}*/

	// using namespace std::chrono;
	// 시간을 잰다
	// auto b = chrono::steady_clock::now();
	// 시간이 걸리는 코드
	// this_thread::sleep_for(1s);
	// 다시 시간을 잰다
	// auto e = chrono::steady_clock::now();
	// 차이를 계산한다
	// // auto t = chrono::duration_cast<chrono::milliseconds>(chrono::steady_clock::now() - b); // ms단위로 변환
	// cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;


	save("main.cpp");
}

/* 시간을 재는 코드
	using namespace std::chrono;
	auto b = chrono::steady_clock::now();
	cout << duration_cast<milliseconds>(steady_clock::now() - b).count() << endl;
*/