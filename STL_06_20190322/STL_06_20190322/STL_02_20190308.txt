

==================
Fri Mar 22 13:49:26 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

// 정수 입력을 받아 그 수만큼 String을 생성하라
// 길이 오름차순으로 정렬 후 출력하라

int main()
{
	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	int num;
	cout << "입력 : ";
	cin >> num;

	String *p = new String[num];
	for (int i = 0; i < num; ++i)
	{
		p[i].set(uid(dre));
	}

	sort(p, p+num, [](const String& a, const String& b) {
		return a.getNum() < b.getNum(); 
	});

	/*for (int i = 0; i < num; ++i)
	{
		cout << p[i] << endl;
	}*/



	save("main.cpp");
}

==================
Fri Mar 22 13:49:51 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

// 정수 입력을 받아 그 수만큼 String을 생성하라
// 길이 오름차순으로 정렬 후 출력하라

int main()
{
	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	int num;
	cout << "입력 : ";
	cin >> num;

	String *p = new String[num];
	for (int i = 0; i < num; ++i)
	{
		p[i].set(uid(dre));
	}

	sort(p, p+num, [](const String& a, const String& b) {
		return a.getNum() < b.getNum(); 
	});

	for (int i = 0; i < num; ++i)
	{
		cout << p[i] << endl;
	}

	delete[] p;

	save("main.cpp");
}

==================
Fri Mar 22 13:50:04 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

// 정수 입력을 받아 그 수만큼 String을 생성하라
// 길이 오름차순으로 정렬 후 출력하라

int main()
{
	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	int num;
	cout << "입력 : ";
	cin >> num;

	String *p = new String[num];
	for (int i = 0; i < num; ++i)
	{
		p[i].set(uid(dre));
	}

	sort(p, p+num, [](const String& a, const String& b) {
		return a.getNum() < b.getNum(); 
	});

	for (int i = 0; i < num; ++i)
	{
		cout << p[i] << endl;
	}

	delete[] p;

	save("main.cpp");
}

==================
Fri Mar 22 13:50:59 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

// 정수 입력을 받아 그 수만큼 String을 생성하라
// 길이 오름차순으로 정렬 후 출력하라

int main()
{
	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	int num;
	cout << "입력 : ";
	cin >> num;

	String *p = new String[num];
	for (int i = 0; i < num; ++i)
	{
		p[i].set(uid(dre));
	}

	sort(p, p+num, [](const String& a, const String& b) {
		return a.getNum() < b.getNum(); 
	});

	for (int i = 0; i < num; ++i)
	{
		cout << p[i] << endl;
	}

	delete[] p;

	save("main.cpp");
}

==================
Fri Mar 22 13:52:56 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

// 정수 입력을 받아 그 수만큼 String을 생성하라
// 길이 오름차순으로 정렬 후 출력하라

int main()
{
	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	int num;
	cout << "입력 : ";
	cin >> num;

	String *p = new String[num];
	for (int i = 0; i < num; ++i)
	{
		p[i].set(uid(dre));
	}

	sort(p, p+num, [](const String& a, const String& b) {
		return a.getNum() < b.getNum(); 
	}); // 정렬중 위치 교환을 위한 Temp로 인해 소멸자 생성

	for (int i = 0; i < num; ++i)
	{
		cout << p[i] << endl;
	}

	delete[] p;

	save("main.cpp");
}

==================
Fri Mar 22 13:53:31 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

// 정수 입력을 받아 그 수만큼 String을 생성하라
// 길이 오름차순으로 정렬 후 출력하라

int main()
{
	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	int num;
	cout << "입력 : ";
	cin >> num;

	String *p = new String[num];
	for (int i = 0; i < num; ++i)
	{
		p[i].set(uid(dre));
	}

	sort(p, p+num, [](const String& a, const String& b) {
		return a.getNum() < b.getNum(); 
	}); // 정렬중 위치 교환을 위한 Temp로 인해 소멸자 생성

	for (int i = 0; i < num; ++i)
	{
		cout << p[i] << endl;
	}

	delete[] p;

	save("main.cpp");
}

==================
Fri Mar 22 14:03:56 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

int main()
{
	String a{ 20 };
	String b{ 30 };

	save("main.cpp");
}

==================
Fri Mar 22 14:04:04 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

int main()
{
	String a{ 20 };
	String b{ 30 };

	save("main.cpp");
}

==================
Fri Mar 22 14:04:10 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

int main()
{
	String a{ 20 };
	String b{ 30 };

	save("main.cpp");
}

==================
Fri Mar 22 14:04:22 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

int main()
{
	String a{ 20 };
	String b{ 30 };

	save("main.cpp");
}

==================
Fri Mar 22 14:05:36 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

int main()
{
	new String { 20 };
	new String { 30 };

	save("main.cpp");
}

==================
Fri Mar 22 14:06:01 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

int main()
{
	String* a = new String { 20 };
	String* b = new String { 30 };

	save("main.cpp");
}

==================
Fri Mar 22 14:06:04 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

int main()
{
	String* a = new String { 20 };
	String* b = new String { 30 };

	save("main.cpp");
}

==================
Fri Mar 22 14:06:21 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

int main()
{
	String* a = new String { 20 };
	String* b = new String { 30 };

	cout << a << endl;
	cout << b << endl;

	save("main.cpp");
}

==================
Fri Mar 22 14:06:38 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include "save.h"
#include "String.h"
using namespace std;

int main()
{
	String* a = new String { 20 };
	String* b = new String { 30 };

	cout << a << endl;
	cout << b << endl;

	delete a;
	delete b;

	save("main.cpp");
}

==================
Fri Mar 22 14:15:15 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	unique_ptr<String> a{ new String{20} };
	unique_ptr<String> b{ new String{30} };

	cout << a << endl;
	cout << b << endl;

	save("main.cpp");
}

==================
Fri Mar 22 14:15:28 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	unique_ptr<String> a{ new String{20} };
	unique_ptr<String> b{ new String{30} };

	cout << *a << endl;
	cout << *b << endl;

	save("main.cpp");
}

==================
Fri Mar 22 14:19:01 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);

	unique_ptr<String> b{ new String{30} };

	cout << *a << endl;
	cout << *b << endl;

	save("main.cpp");
}

==================
Fri Mar 22 14:19:33 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);

	// unique_ptr<String> b{ new String{30} };
	auto b = make_unique<String>(30);

	cout << *a << endl;
	cout << *b << endl;

	save("main.cpp");
}

==================
Fri Mar 22 14:20:15 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);

	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);

	cout << *a << endl;
	cout << *b << endl;

	save("main.cpp");
}

==================
Fri Mar 22 14:36:06 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	unique_ptr<String[]> str{ new String[num] };

	default_random_engine dre;
	uniform_int_distribution<> uid(10, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	save("main.cpp");
}

==================
Fri Mar 22 14:36:44 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	unique_ptr<String[]> str{ new String[num] };

	default_random_engine dre;
	uniform_int_distribution<> uid(10, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
		cout << str[i] << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 22 14:38:19 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	unique_ptr<String[]> str{ new String[num] };

	default_random_engine dre;
	uniform_int_distribution<> uid(10, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() < b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 22 14:39:40 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	unique_ptr<String[]> str{ new String[num] };

	default_random_engine dre;
	uniform_int_distribution<> uid(10, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() < b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 22 14:41:06 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(10, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() < b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 22 14:41:12 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(10, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() < b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 22 14:41:44 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(10, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() > b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 22 14:41:55 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include "save.h"
#include "String.h"
using namespace std;

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)

int main()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() > b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}

	save("main.cpp");
}

==================
Fri Mar 22 14:58:02 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;

// 62p 연습문제 1
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 
// 초기화 한 후에 반복자를 사용해 배열의 내용을 한줄에 하나씩 
// 출력하는 프로그램을 작성하라

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)
void UniquePointer();
void Practice1();

int main()
{
	// UniquePointer();
	Practice1();

	save("main.cpp");
}

void UniquePointer()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() > b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}
}
void Practice1()
{
	string s[5] { "3월", "22일", "미세먼지없음", "신기", "STL" };		// RAII (초기화 동작)

	auto p = begin(s);

	cout << p << endl;

}

==================
Fri Mar 22 14:58:11 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;

// 62p 연습문제 1
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 
// 초기화 한 후에 반복자를 사용해 배열의 내용을 한줄에 하나씩 
// 출력하는 프로그램을 작성하라

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)
void UniquePointer();
void Practice1();

int main()
{
	// UniquePointer();
	Practice1();

	save("main.cpp");
}

void UniquePointer()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() > b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}
}
void Practice1()
{
	string s[5] { "3월", "22일", "미세먼지없음", "신기", "STL" };		// RAII (초기화 동작)

	auto p = begin(s);

	cout << *p << endl;

}

==================
Fri Mar 22 15:01:02 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;

// 62p 연습문제 1
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 
// 초기화 한 후에 반복자를 사용해 배열의 내용을 한줄에 하나씩 
// 출력하는 프로그램을 작성하라

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)
void UniquePointer();
void Practice1();

int main()
{
	// UniquePointer();
	Practice1();

	save("main.cpp");
}

void UniquePointer()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() > b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}
}
void Practice1()
{
	string s[5] { "3월", "22일", "미세먼지없음", "신기", "STL" };		// RAII (초기화 동작)

	auto p = begin(s);
	// *p : 역참조
	cout << *p << endl;

	++p;
	cout << *p << endl;
}

==================
Fri Mar 22 15:02:08 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;

// 62p 연습문제 1
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 
// 초기화 한 후에 반복자를 사용해 배열의 내용을 한줄에 하나씩 
// 출력하는 프로그램을 작성하라

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)
void UniquePointer();
void Practice1();

int main()
{
	// UniquePointer();
	Practice1();

	save("main.cpp");
}

void UniquePointer()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() > b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}
}
void Practice1()
{
	string s[5] { "3월", "22일", "미세먼지없음", "신기", "STL" };		// RAII (초기화 동작)

	auto p = begin(s);
	// *p : 역참조
	
	while (p != end(s))
		cout << *p++ << endl;
}

==================
Fri Mar 22 15:02:18 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include "save.h"
#include "String.h"
using namespace std;

// 62p 연습문제 1
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 
// 초기화 한 후에 반복자를 사용해 배열의 내용을 한줄에 하나씩 
// 출력하는 프로그램을 작성하라

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)
void UniquePointer();
void Practice1();

int main()
{
	// UniquePointer();
	Practice1();

	save("main.cpp");
}

void UniquePointer()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() > b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}
}
void Practice1()
{
	string s[5] { "3월", "22일", "미세먼지없음", "신기", "STL" };		// RAII (초기화 동작)

	auto p = begin(s);
	// *p : 역참조
	
	while (p != end(s))
		cout << *p++ << endl;
}

==================
Fri Mar 22 15:03:29 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <list>
#include "save.h"
#include "String.h"
using namespace std;

// 62p 연습문제 1
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 
// 초기화 한 후에 반복자를 사용해 배열의 내용을 한줄에 하나씩 
// 출력하는 프로그램을 작성하라

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)
void UniquePointer();
void Practice1();

int main()
{
	// UniquePointer();
	Practice1();

	save("main.cpp");
}

void UniquePointer()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() > b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}
}
void Practice1()
{
	// string s[5] { "3월", "22일", "미세먼지없음", "신기", "STL" };		// RAII (초기화 동작)
	list<string> s { "3월", "22일", "미세먼지없음", "신기", "STL" };

	auto p = begin(s);
	// *p : 역참조
	
	while (p != end(s))
		cout << *p++ << endl;
}

==================
Fri Mar 22 15:16:12 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <list>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;

// 62p 연습문제 1
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 
// 초기화 한 후에 반복자를 사용해 배열의 내용을 한줄에 하나씩 
// 출력하는 프로그램을 작성하라

// 62p 연습문제 2
// 각 원소에 transform() 알고리즈을 적용해 단어의 모든 소문자 모음을 
// '*'로 대체하고 표준 출력 스트림으로 한 줄에 하나씩 출력하는 프로그램을 
// 작성하라 문자열에 있는 모음을 대체하는 함수를 반복자를 사용하는 람다 표현식으로 정의하라

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)
void UniquePointer();
void Practice1();
void Practice2();

int main()
{
	// UniquePointer();
	// Practice1();
	Practice2();
	save("main.cpp");
}

void UniquePointer()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() > b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}
}
void Practice1()
{
	// string s[5] { "3월", "22일", "미세먼지없음", "신기", "STL" };		// RAII (초기화 동작)
	list<string> s { "3월", "22일", "미세먼지없음", "신기", "STL" };

	auto p = begin(s);
	// *p : 역참조
	
	while (p != end(s))
		cout << *p++ << endl;
}
void Practice2()
{
	list<string> s{ "spring", "summner", "winter", "and", "fall" };

	// transform(어디서부터, 어디까지를, 어디로, 어떻게변형해서);
	transform(begin(s), end(s), ostream_iterator<string>(cout, "\n"),
		[](string& str) {
		for (char& c : str) {
			if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')
				c = '*';
		}
	});
}

==================
Fri Mar 22 15:17:36 2019

==================
// Smart Pointer
//==============================================================
#include <iostream>
#include <random>
#include <algorithm>
#include <memory>
#include <string>
#include <list>
#include <iterator>
#include "save.h"
#include "String.h"
using namespace std;

// 62p 연습문제 1
// std::string 객체로 된 배열을 정의하고, 자신이 선택한 단어들로 
// 초기화 한 후에 반복자를 사용해 배열의 내용을 한줄에 하나씩 
// 출력하는 프로그램을 작성하라

// 62p 연습문제 2
// 각 원소에 transform() 알고리즈을 적용해 단어의 모든 소문자 모음을 
// '*'로 대체하고 표준 출력 스트림으로 한 줄에 하나씩 출력하는 프로그램을 
// 작성하라 문자열에 있는 모음을 대체하는 함수를 반복자를 사용하는 람다 표현식으로 정의하라

// 1. unique_ptr	- 자원을 독점한다
// 2. shared_ptr	- 자원을 공유한다 (비싼 자원)
void UniquePointer();
void Practice1();
void Practice2();

int main()
{
	// UniquePointer();
	// Practice1();
	Practice2();
	save("main.cpp");
}

void UniquePointer()
{
	// unique_ptr<String> a{ new String{20} };
	auto a = make_unique<String>(20);
	// unique_ptr<String> b{ new String{30} };
	unique_ptr<String>b = make_unique<String>(30);
	// a = b; // 자원을 독점하기 때문에 실행x
	cout << *a << endl;
	cout << *b << endl;

	cout << "몇 개나 만들까요 : ";
	int num;
	cin >> num;
	// unique_ptr<String[]> str{ new String[num] };
	auto str = make_unique<String[]>(num);

	default_random_engine dre;
	uniform_int_distribution<> uid(1, 80);

	for (int i = 0; i < num; ++i)
	{
		str[i].set(uid(dre));
	}

	sort(&str[0], &str[0] + num, [](const String& a, const String& b) {
		return a.getNum() > b.getNum();
	});

	for (int i = 0; i < num; ++i)
	{
		cout << str[i] << endl;
	}
}
void Practice1()
{
	// string s[5] { "3월", "22일", "미세먼지없음", "신기", "STL" };		// RAII (초기화 동작)
	list<string> s { "3월", "22일", "미세먼지없음", "신기", "STL" };

	auto p = begin(s);
	// *p : 역참조
	
	while (p != end(s))
		cout << *p++ << endl;
}
void Practice2()
{
	list<string> s{ "spring", "summner", "winter", "and", "fall" };

	// transform(어디서부터, 어디까지를, 어디로, 어떻게변형해서);
	transform(begin(s), end(s), ostream_iterator<string>(cout, "\n"),
		[](string& str) {
		for (char& c : str) {
			if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')
				c = '*';
		}
		return str;
	});
}